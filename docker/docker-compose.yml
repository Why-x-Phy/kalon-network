version: '3.8'

services:
  # Kalon Node
  kalon-node:
    build:
      context: ..
      dockerfile: docker/Dockerfile.node
    container_name: kalon-node
    restart: unless-stopped
    ports:
      - "16314:16314"  # RPC
      - "17333:17333"  # P2P
    volumes:
      - kalon-data:/app/data
      - ./genesis.json:/app/genesis.json:ro
    environment:
      - KALON_RPC_ADDR=:16314
      - KALON_P2P_ADDR=:17333
      - KALON_DATA_DIR=/app/data
      - KALON_GENESIS_FILE=/app/genesis.json
      - KALON_SEED_NODES=seed1.kalon.network:17333,seed2.kalon.network:17333,seed3.kalon.network:17333
    command: [
      "kalon-node",
      "--rpc", ":16314",
      "--p2p", ":17333",
      "--genesis", "/app/genesis.json",
      "--datadir", "/app/data",
      "--seednodes", "seed1.kalon.network:17333,seed2.kalon.network:17333,seed3.kalon.network:17333"
    ]
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:16314/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - kalon-network

  # Kalon Explorer API
  kalon-explorer-api:
    build:
      context: ..
      dockerfile: docker/Dockerfile.api
    container_name: kalon-explorer-api
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      - KALON_RPC_URL=http://kalon-node:16314
      - KALON_API_ADDR=:8081
      - KALON_DB_URL=sqlite:///app/data/explorer.db
    volumes:
      - kalon-data:/app/data
    depends_on:
      kalon-node:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - kalon-network

  # Kalon Explorer UI
  kalon-explorer:
    build:
      context: ..
      dockerfile: docker/Dockerfile.explorer
    container_name: kalon-explorer
    restart: unless-stopped
    ports:
      - "8080:8080"
    depends_on:
      kalon-explorer-api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - kalon-network

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: kalon-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - kalon-redis-data:/data
    command: redis-server --appendonly yes
    networks:
      - kalon-network

  # Prometheus for monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: kalon-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - kalon-prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - kalon-network

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: kalon-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - kalon-grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - kalon-network

volumes:
  kalon-data:
    driver: local
  kalon-redis-data:
    driver: local
  kalon-prometheus-data:
    driver: local
  kalon-grafana-data:
    driver: local

networks:
  kalon-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
